// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using proyecto.Context;

#nullable disable

namespace proyecto.Migrations
{
    [DbContext(typeof(AgroCacao))]
    [Migration("20240418211833_Inicial")]
    partial class Inicial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("proyecto.Model.Cultivo", b =>
                {
                    b.Property<int>("IDCultivo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDCultivo"));

                    b.Property<DateOnly>("FechaCosechaE")
                        .HasColumnType("date");

                    b.Property<DateOnly>("FechaModificacion")
                        .HasColumnType("date");

                    b.Property<int>("IdEstadoFK")
                        .HasColumnType("int");

                    b.Property<int>("IdSiembraFK")
                        .HasColumnType("int");

                    b.HasKey("IDCultivo");

                    b.HasIndex("IdEstadoFK");

                    b.HasIndex("IdSiembraFK");

                    b.ToTable("Cultivos");
                });

            modelBuilder.Entity("proyecto.Model.EstadoCultivo", b =>
                {
                    b.Property<int>("IDEstado")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDEstado"));

                    b.Property<string>("NombreEstado")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDEstado");

                    b.ToTable("EstadoCultivos");
                });

            modelBuilder.Entity("proyecto.Model.Insumos", b =>
                {
                    b.Property<int>("IDInsumo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDInsumo"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NombreInsumo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("stock")
                        .HasColumnType("int");

                    b.HasKey("IDInsumo");

                    b.ToTable("Insumos");
                });

            modelBuilder.Entity("proyecto.Model.InsumosRequeridos", b =>
                {
                    b.Property<int>("IDInRe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDInRe"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("IDInsumoFK")
                        .HasColumnType("int");

                    b.Property<int>("IDProcedimientoFK")
                        .HasColumnType("int");

                    b.HasKey("IDInRe");

                    b.HasIndex("IDInsumoFK");

                    b.HasIndex("IDProcedimientoFK");

                    b.ToTable("InsumosRequeridos");
                });

            modelBuilder.Entity("proyecto.Model.Logro", b =>
                {
                    b.Property<int>("IDLogro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDLogro"));

                    b.Property<string>("NombreLogro")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDLogro");

                    b.ToTable("Logros");
                });

            modelBuilder.Entity("proyecto.Model.LogroConseguido", b =>
                {
                    b.Property<int>("IDLogCon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDLogCon"));

                    b.Property<DateOnly>("FechaLogro")
                        .HasColumnType("date");

                    b.Property<int>("IDLogroFK")
                        .HasColumnType("int");

                    b.Property<int>("IDPartidaFK")
                        .HasColumnType("int");

                    b.HasKey("IDLogCon");

                    b.HasIndex("IDLogroFK");

                    b.HasIndex("IDPartidaFK");

                    b.ToTable("LogrosConseguidos");
                });

            modelBuilder.Entity("proyecto.Model.Partida", b =>
                {
                    b.Property<int>("IDPartida")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDPartida"));

                    b.Property<DateOnly>("FechaInicio")
                        .HasColumnType("date");

                    b.Property<int>("IDUsuario")
                        .HasColumnType("int");

                    b.Property<int?>("UsuarioIDUsuario")
                        .HasColumnType("int");

                    b.HasKey("IDPartida");

                    b.HasIndex("UsuarioIDUsuario");

                    b.ToTable("Partida");
                });

            modelBuilder.Entity("proyecto.Model.Procedimento", b =>
                {
                    b.Property<int>("IDProcedimiento")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDProcedimiento"));

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("FechaProcedimiento")
                        .HasColumnType("date");

                    b.Property<int>("IDCultivoFK")
                        .HasColumnType("int");

                    b.Property<int>("IDTipoProcedimientoFK")
                        .HasColumnType("int");

                    b.HasKey("IDProcedimiento");

                    b.HasIndex("IDCultivoFK");

                    b.HasIndex("IDTipoProcedimientoFK");

                    b.ToTable("Procedimentos");
                });

            modelBuilder.Entity("proyecto.Model.Rol", b =>
                {
                    b.Property<int>("IdRol")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRol"));

                    b.Property<string>("TipoRol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IdRol");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("proyecto.Model.Siembra", b =>
                {
                    b.Property<int>("IDSiembra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDSiembra"));

                    b.Property<float>("AreaTotalS")
                        .HasColumnType("real");

                    b.Property<DateOnly>("FechaSiembra")
                        .HasColumnType("date");

                    b.Property<int>("IDTerrenoFK")
                        .HasColumnType("int");

                    b.HasKey("IDSiembra");

                    b.HasIndex("IDTerrenoFK");

                    b.ToTable("Siembras");
                });

            modelBuilder.Entity("proyecto.Model.Terreno", b =>
                {
                    b.Property<int>("IDTerreno")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDTerreno"));

                    b.Property<float>("Area")
                        .HasColumnType("real");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDTerreno");

                    b.ToTable("Terrenos");
                });

            modelBuilder.Entity("proyecto.Model.TipoDocumento", b =>
                {
                    b.Property<int>("IDTipoDoc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDTipoDoc"));

                    b.Property<string>("TipoDo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDTipoDoc");

                    b.ToTable("TipoDocumentos");
                });

            modelBuilder.Entity("proyecto.Model.TipoProcedimiento", b =>
                {
                    b.Property<int>("IDTipoPro")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDTipoPro"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDTipoPro");

                    b.ToTable("TipoProcedimientos");
                });

            modelBuilder.Entity("proyecto.Model.Trabajadores", b =>
                {
                    b.Property<int>("IDTrabajador")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDTrabajador"));

                    b.Property<string>("Apellidos")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("IDRolFK")
                        .HasColumnType("int");

                    b.Property<int>("IDTipoDocFK")
                        .HasColumnType("int");

                    b.Property<string>("Nombres")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumDoc")
                        .HasColumnType("int");

                    b.HasKey("IDTrabajador");

                    b.HasIndex("IDRolFK");

                    b.HasIndex("IDTipoDocFK");

                    b.ToTable("Trabajadores");
                });

            modelBuilder.Entity("proyecto.Model.TrabajadoresRequeridos", b =>
                {
                    b.Property<int>("IDTraRe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDTraRe"));

                    b.Property<int>("IDProcedimientoFK")
                        .HasColumnType("int");

                    b.Property<int>("IDTrabjadorFK")
                        .HasColumnType("int");

                    b.HasKey("IDTraRe");

                    b.HasIndex("IDProcedimientoFK");

                    b.HasIndex("IDTrabjadorFK");

                    b.ToTable("TrabajadoresRequeridos");
                });

            modelBuilder.Entity("proyecto.Model.Usuario", b =>
                {
                    b.Property<int>("IDUsuario")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IDUsuario"));

                    b.Property<int>("IdRolFK")
                        .HasColumnType("int");

                    b.Property<string>("contrasena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IDUsuario");

                    b.HasIndex("IdRolFK");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("proyecto.Model.Cultivo", b =>
                {
                    b.HasOne("proyecto.Model.EstadoCultivo", "EstadoCultivo")
                        .WithMany()
                        .HasForeignKey("IdEstadoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("proyecto.Model.Siembra", "Siembra")
                        .WithMany()
                        .HasForeignKey("IdSiembraFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EstadoCultivo");

                    b.Navigation("Siembra");
                });

            modelBuilder.Entity("proyecto.Model.InsumosRequeridos", b =>
                {
                    b.HasOne("proyecto.Model.Insumos", "Insumos")
                        .WithMany()
                        .HasForeignKey("IDInsumoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("proyecto.Model.Procedimento", "Procedimento")
                        .WithMany()
                        .HasForeignKey("IDProcedimientoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Insumos");

                    b.Navigation("Procedimento");
                });

            modelBuilder.Entity("proyecto.Model.LogroConseguido", b =>
                {
                    b.HasOne("proyecto.Model.Logro", "Logro")
                        .WithMany()
                        .HasForeignKey("IDLogroFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("proyecto.Model.Partida", "Partida")
                        .WithMany()
                        .HasForeignKey("IDPartidaFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Logro");

                    b.Navigation("Partida");
                });

            modelBuilder.Entity("proyecto.Model.Partida", b =>
                {
                    b.HasOne("proyecto.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioIDUsuario");

                    b.Navigation("Usuario");
                });

            modelBuilder.Entity("proyecto.Model.Procedimento", b =>
                {
                    b.HasOne("proyecto.Model.Cultivo", "Cultivo")
                        .WithMany()
                        .HasForeignKey("IDCultivoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("proyecto.Model.TipoProcedimiento", "TipoProcedimiento")
                        .WithMany()
                        .HasForeignKey("IDTipoProcedimientoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cultivo");

                    b.Navigation("TipoProcedimiento");
                });

            modelBuilder.Entity("proyecto.Model.Siembra", b =>
                {
                    b.HasOne("proyecto.Model.Terreno", "Terreno")
                        .WithMany()
                        .HasForeignKey("IDTerrenoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Terreno");
                });

            modelBuilder.Entity("proyecto.Model.Trabajadores", b =>
                {
                    b.HasOne("proyecto.Model.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("IDRolFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("proyecto.Model.TipoDocumento", "TipoDocumento")
                        .WithMany()
                        .HasForeignKey("IDTipoDocFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");

                    b.Navigation("TipoDocumento");
                });

            modelBuilder.Entity("proyecto.Model.TrabajadoresRequeridos", b =>
                {
                    b.HasOne("proyecto.Model.Procedimento", "Procedimento")
                        .WithMany()
                        .HasForeignKey("IDProcedimientoFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("proyecto.Model.Trabajadores", "Trabajadores")
                        .WithMany()
                        .HasForeignKey("IDTrabjadorFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Procedimento");

                    b.Navigation("Trabajadores");
                });

            modelBuilder.Entity("proyecto.Model.Usuario", b =>
                {
                    b.HasOne("proyecto.Model.Rol", "Rol")
                        .WithMany()
                        .HasForeignKey("IdRolFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Rol");
                });
#pragma warning restore 612, 618
        }
    }
}
